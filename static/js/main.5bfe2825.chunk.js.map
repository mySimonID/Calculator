{"version":3,"sources":["components/Display.js","components/ButtonObj.js","components/ButtonBoard.js","logic/Calculate.js","logic/IsNumber.js","logic/Logic.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","this","props","value","Component","ButtonObj","handleClick","clickHandler","name","classNameWidth","wide","classNameColour","orange","blue","onClick","ButtonBoard","e","Calculate","state","firstNum","Number","total","secondNum","current","result","action","toString","IsNumber","number","indexOf","Logic","buttonid","includes","console","log","startsWith","substr","App","handleCLick","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bfe2825.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport '../css/Display.css'\nclass Display extends Component {\n\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col s12\">\n        <div className=\"display\">\n          <div>{this.props.value}</div>\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Display\n","import React, {Component} from 'react'\n\nclass ButtonObj extends Component {\n\n  handleClick = () => {\n    this.props.clickHandler(this.props.name);\n  }\n\n  render() {\n\n    let classNameWidth = \"calcButton \";\n    classNameWidth += this.props.wide ? \"wide\" : \"\";\n\n    let classNameColour = \"btn \" ;\n    classNameColour += this.props.orange ? \"orange\" : \"\";\n    classNameColour += this.props.blue ? \"blue\" : \"\";\n    \n    return (\n    \n      <div className={classNameWidth}>\n        <button className={classNameColour} onClick={this.handleClick}>{this.props.name}</button>\n      </div>\n    )\n  }\n}\n\nexport default ButtonObj\n\n","import React, {Component} from 'react'\nimport ButtonObj from './ButtonObj'\n\nclass ButtonBoard extends Component {\n\n  clickHandler = (e) => {\n   // e.preventDefault();\n   this.props.clickHandler(e);\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col s12\">\n          <ButtonObj name=\"AC\"  clickHandler={this.clickHandler} wide   />\n          <ButtonObj name=\"+/-\" clickHandler={this.clickHandler}        />\n          <ButtonObj name=\"+\"   clickHandler={this.clickHandler} orange />\n        </div>\n        <div className=\"col s12\">\n          <ButtonObj name=\"7\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"8\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"9\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"x\" clickHandler={this.clickHandler} orange/>\n        </div>\n        <div className=\"col s12\">\n          <ButtonObj name=\"4\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"5\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"6\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"-\" clickHandler={this.clickHandler} orange />\n        </div>\n        <div className=\"col s12\">\n          <ButtonObj name=\"1\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"2\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"3\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"/\" clickHandler={this.clickHandler} orange />\n        </div>\n        <div className=\"col s12\">\n          <ButtonObj name=\"0\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\".\" clickHandler={this.clickHandler} />\n          <ButtonObj name=\"=\" clickHandler={this.clickHandler} wide blue/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ButtonBoard\n","\n\nconst Calculate = (state) => {\n\n  const firstNum = Number(state.total || \"0\");\n  const secondNum = Number(state.current || \"0\");\n\n  let result = 0;\n\n  switch (state.action) {\n    case \"+\":\n      //console.log(\":::\", state);\n      result = firstNum + secondNum\n      break;\n    case \"-\":\n      result = firstNum - secondNum\n      break;\n    case \"x\":\n      result = firstNum * secondNum\n      break;\n    case \"/\":\n      if (secondNum > 0) {\n        result = firstNum / secondNum\n      }\n      else {\n        result = \"divide by zero\"\n      }\n      break;\n    default:\n      break;\n  }\n  return result.toString();\n}\n\nexport default Calculate\n\n","\n\nfunction IsNumber(number) {\n  return \"0123456789\".indexOf(number) > 0\n}\n\nexport default IsNumber","\n\nimport Calculate from './Calculate'\nimport IsNumber from './IsNumber'\n/*\n * Given a button id and an action return an updated state object.\n *\n * Logic data object contains:\n *   total:String         the running total\n *   current:String       the current number to be operated on with the total\n *   action:String        +, -, *, /, =  etc.\n */\n\nconst Logic = (state, buttonid) => {\n\n  if (buttonid === \"AC\") {\n\n    // ALL Clear\n\n    return {\n      total: null,\n      current: null,\n      action: null\n    }\n  }\n\n  if (IsNumber(buttonid)) {\n    if (buttonid === \"0\" && state.current === \"0\") {\n      return { state }\n    }\n\n    // If an action is present, then concatinate the buttonid number to state.current\n\n    if (state.action) {\n      if (state.current) {\n        return { current: state.current + buttonid }\n      }\n      return { current: buttonid }\n    }\n\n    // If there isn't an action, then add number to the state.total\n\n    if (state.current) {\n      return { current: state.current + buttonid }\n    }\n    return { current: buttonid }\n\n  }\n  else {\n\n    // Not a number\n    // Must be an action key(+*/-) or a '.', '+/-',  '%' or '='\n\n    if (buttonid === '.') {\n\n      // Add decimal point only if current does not already have one.\n      if (state.current) {\n        if (state.current.includes(\".\")) {\n          return { state };\n        }\n        //console.log(\">>\", state.current + \".\");\n        return {\n          current: state.current + \".\"\n        }\n      }\n      else {\n        return { current: \"0.\" }\n      }\n    }\n    else if (buttonid === \"+/-\") {\n\n      // Switch the negativity\n\n      if (state.current) {\n        if (state.current.startsWith(\"-\")) {\n\n          // remove the '-' from the start of the current number\n          return { current: state.current.substr(1) }\n        }\n        else {\n          return { current: \"-\" + state.current }\n        }\n      }\n\n      if (state.total) {\n        if (state.total.startsWith(\"-\")) {\n\n          // remove the '-' from the start of the current number\n          return { total: state.total.substr(1) }\n        }\n        else {\n          return { total: \"-\" + state.total }\n        }\n      }\n\n    }\n    else if (buttonid === \"=\") {\n      const result = Calculate(state);\n      console.log(\"Result:\", result);\n      return {\n        total: Calculate(state),\n        current: null,\n        action: null\n      }\n    }\n    else {\n\n      // buttonid is an operator action (+-/*)\n      // 1) If there is an existing operator action then perform the calculation\n      // 2) If there is an existing current value, then move this into total and save the operator action\n      //     make current = null\n      // 3) If there is not an existing current value, then simple store the operator action\n\n      if (state.action) {    // 1)\n        const result = Calculate(state);\n        console.log(\"Result:\", result);\n        return {\n          total: Calculate(state),\n          current: null,\n          action: buttonid\n        }\n      }\n      else if (state.current)    // 2)\n        return {\n          total: state.current,\n          current: null,\n          action: buttonid\n        }\n      else {                // 3)\n        return {\n          action: buttonid\n        }\n      }\n    }\n  }\n}\n\nexport default Logic","import React, { Component } from 'react';\nimport Display from './components/Display'\nimport ButtonBoard from './components/ButtonBoard'\nimport Logic from './logic/Logic'\nimport './App.css';\n\n//\n// Calculator created using react\n//\nclass App extends Component {\n\n  state = {\n    total: null,\n    current: null,\n    action: null\n  };\n\n  handleCLick = (buttonid) => {\n   // e.preventDefault();\n    //console.log(e.target.id)\n    this.setState(Logic(this.state, buttonid))\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n          <div className=\"calcBorder\">\n            <Display value={this.state.current || this.state.total || \"0\"} />\n            <ButtonBoard clickHandler={this.handleCLick} />\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}